/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMaxSum(TreeNode* root, bool accept, 
                  map<pair<TreeNode*, bool>, int>& memo) {
        if(root == NULL) {
            return 0;
        }

        bool foundIncluded = memo.find(make_pair(root, true)) != memo.end();
        bool foundNotIncluded = memo.find(make_pair(root, false)) != memo.end();
        
        if(accept and foundNotIncluded and foundIncluded) {
            return max(memo[make_pair(root, true)], memo[make_pair(root, false)]);
        }
        
        if(!accept and foundNotIncluded) {
            return memo[make_pair(root, false)];
        }

        memo[make_pair(root, true)] = root->val + 
            getMaxSum(root->left, false, memo) + 
            getMaxSum(root->right, false, memo);
        
        memo[make_pair(root, false)] = 
                  getMaxSum(root->left, true, memo) + 
                  getMaxSum(root->right, true, memo);
        
        if(accept) {
            return max(memo[make_pair(root, true)], memo[make_pair(root, false)]);
        }
        
        return memo[make_pair(root, false)];
    }
    
    int rob(TreeNode* root) {
        map<pair<TreeNode*, bool>, int> memo;
        
        return getMaxSum(root, true, memo);
    }
};